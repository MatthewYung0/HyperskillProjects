type: edu
custom_name: Removing vertices & edges
files:
  - name: src/visualizer/ApplicationRunner.java
    visible: true
    text: |
      package visualizer;
      
      public class ApplicationRunner {
          public static void main(String[] args) {
              new MainFrame();
          }
      }
    learner_created: false
  - name: src/visualizer/MainFrame.java
    visible: true
    text: |-
      package visualizer;
      
      import javax.swing.*;
      import java.awt.*;
      import java.awt.event.MouseAdapter;
      import java.awt.event.MouseEvent;
      
      public class MainFrame extends JFrame{
      
          private int mouseX = 0;
          private int mouseY = 0;
          private JPanel graph;
          private MODE mode = MODE.NONE;
          private MouseAdapter mouseAdapter;
          private final String currentOptionString = "Current Mode -> ";
          private final String addAVertexString = "Add a Vertex";
          private final String addAnEdgeString = "Add an Edge";
          private final String addNoneString = "None";
          private JLabel currentMode;
      
          public MainFrame() {
              setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              setTitle("Graph-Algorithms Visualizer");
              setSize(800, 600);
              setLayout(null);
              initGraph();
              initMenu();
              initMouseAdapter();
              initCurrentMode();
              setVisible(true);
          }
      
          private void initCurrentMode() {
              currentMode = new JLabel(currentOptionString + addAVertexString);
              currentMode.setName("Mode");
              currentMode.setForeground(Color.BLACK);
              currentMode.setBounds(10,550,300,50);
              add(currentMode);
          }
      
          private void initMouseAdapter() {
              mouseAdapter = new MouseAdapter() {
                  @Override
                  public void mouseClicked(MouseEvent mouseEvent) {
                      super.mouseClicked(mouseEvent);
                      mouseX = mouseEvent.getX();
                      mouseY = mouseEvent.getY();
                      switch (mode) {
                          case ADD_VERTEX -> createVertex(getVertexID());
                          case ADD_EDGE -> createEdge(getWeight());
                      }
                  }
              };
              graph.addMouseListener(mouseAdapter);
          }
      
          private void initMenu() {
              JMenuBar menuBar = new JMenuBar();
              setJMenuBar(menuBar);
              JMenu modeMenu = new JMenu("Mode");
              menuBar.add(modeMenu);
              initModeMenuItems(modeMenu);
          }
      
          private void initModeMenuItems(JMenu modeMenu) {
              // Creating JMenu items
              JMenuItem addVertexMenuItem = new JMenuItem(addAVertexString);
              JMenuItem addEdgeMenuItem = new JMenuItem(addAnEdgeString);
              JMenuItem addNoneMenuItem = new JMenuItem(addNoneString);
              addVertexMenuItem.setName(addAVertexString);
              addEdgeMenuItem.setName(addAnEdgeString);
              addNoneMenuItem.setName(addNoneString);
              // Adding them to the Menu
              modeMenu.add(addVertexMenuItem);
              modeMenu.add(addEdgeMenuItem);
              modeMenu.add(addNoneMenuItem);
              // Changes the mode enum to the users selection
              addVertexMenuItem.addActionListener(event -> {
                  mode = MODE.ADD_VERTEX;
                  setCurrentOption(MODE.ADD_VERTEX);
              });
              addEdgeMenuItem.addActionListener(event -> {
                  mode = MODE.ADD_EDGE;
                  setCurrentOption(MODE.ADD_EDGE);
              });
              addNoneMenuItem.addActionListener(event -> {
                  mode = MODE.NONE;
                  setCurrentOption(MODE.NONE);
              });
          }
      
          private void initGraph() {
              graph = new JPanel();
              graph.setName("Graph");
              //graph.setBackground(Color.BLACK);
              graph.setBackground(new Color(0, 0, 0, 0));
              graph.setLayout(null);
              graph.setBorder(BorderFactory.createLineBorder(Color.BLACK));
              graph.setSize(800, 600);
              graph.addMouseListener(mouseAdapter);
              this.add(graph);
          }
      
          private void setCurrentOption(MODE mode) {
              switch(mode) {
                  case ADD_VERTEX -> currentMode.setText(currentOptionString + addAVertexString);
                  case ADD_EDGE -> currentMode.setText(currentOptionString + addAnEdgeString);
                  case NONE -> currentMode.setText(currentOptionString + addNoneString);
              }
          }
      
          private String getWeight() {
              String weightNum = null;
              boolean validInput = false;
              while (!validInput) {
                  // Prompt for weightNum
                  weightNum = JOptionPane.showInputDialog(null, "Enter Weight:", "Input", JOptionPane.PLAIN_MESSAGE);
                  if (weightNum == null) {
                      // User clicked cancel
                      return null;
                  }
                  if (Character.isDigit(weightNum.charAt(0))) {
                      validInput = true;
                  }
              }
              return weightNum;
          }
      
          private void createEdge(String weightNum) {
      
          }
      
          private String getVertexID() {
              String vertexID = null;
              boolean validInput = false;
              while (!validInput) {
                  // Prompt for vertex ID
                  vertexID = JOptionPane.showInputDialog(null, "Enter Vertex ID (Should be 1 char):", "Vertex", JOptionPane.PLAIN_MESSAGE);
                  if (vertexID == null) {
                      // User clicked cancel
                      return null;
                  }
                  if (vertexID.length() == 1 && (Character.isLetter(vertexID.charAt(0)) || Character.isDigit(vertexID.charAt(0)))) {
                      validInput = true;
                  }
              }
              return vertexID;
          }
      
          private void createVertex(String vertexID) {
              Vertex vertex = new Vertex("Vertex " + vertexID, "VertexLabel " + vertexID, vertexID);
              // Set vertex position
              vertex.setBounds(mouseX-25, mouseY-25, 50, 50);
              graph.add(vertex);
              graph.repaint();
          }
      
      
      }
    learner_created: false
  - name: src/visualizer/Vertex.java
    visible: true
    text: |
      package visualizer;
      
      import javax.swing.*;
      import java.awt.*;
      
      public class Vertex extends JPanel {
          private final String labelName;
          private final String labelText;
          private final int diameter = 50;
      
          public Vertex(String panelName, String labelName, String labelText) {
              this.labelName = labelName;
              this.labelText = labelText;
              setName(panelName);
              setPreferredSize(new Dimension(diameter,diameter));
              setLayout(null);
              createLabel();
          }
      
          @Override
          protected void paintComponent(Graphics g) {
              super.paintComponent(g);
              g.setColor(new Color(0, 0, 0, 0));
              g.fillRect(0,0, diameter, diameter);
              g.setColor(Color.BLACK);
              g.fillOval(0, 0, diameter, diameter);
          }
      
          public void createLabel() {
              JLabel label = new JLabel(labelText);
              label.setName(this.labelName);
              label.setForeground(Color.WHITE);
              label.setHorizontalAlignment(SwingConstants.CENTER);
              label.setVerticalAlignment(SwingConstants.CENTER);
              label.setBounds(0, 0, diameter, diameter); // Adjust label bounds to match the panel size
              add(label);
          }
      }
    learner_created: false
  - name: src/visualizer/MODE.java
    visible: true
    text: |
      package visualizer;
      
      public enum MODE {
          ADD_VERTEX,
          ADD_EDGE,
          NONE
      }
    learner_created: false
  - name: src/visualizer/Edge.java
    visible: true
    text: |
      package visualizer;
      
      import javax.swing.*;
      
      public class Edge extends JComponent {
      
      }
    learner_created: false
  - name: test/RemovingVerticesAndEdgesTests.java
    visible: false
    text: |
      import org.assertj.swing.exception.ActionFailedException;
      import org.assertj.swing.exception.ComponentLookupException;
      import org.assertj.swing.exception.WaitTimedOutError;
      import org.assertj.swing.finder.JOptionPaneFinder;
      import org.assertj.swing.fixture.JLabelFixture;
      import org.assertj.swing.fixture.JMenuItemFixture;
      import org.assertj.swing.fixture.JOptionPaneFixture;
      import org.assertj.swing.fixture.JPanelFixture;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.stage.SwingTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.swing.SwingComponent;
      import visualizer.MainFrame;
      
      import javax.swing.*;
      import java.awt.*;
      import java.util.*;
      import java.util.List;
      import java.util.regex.Pattern;
      
      import static org.assertj.core.api.Assertions.assertThat;
      import static org.hyperskill.hstest.testcase.CheckResult.correct;
      import static org.hyperskill.hstest.testcase.CheckResult.wrong;
      
      class Vertex {
        private final String id;
        private final Point point;
      
        Vertex(String id, Point point) {
          this.id = id;
          this.point = point;
        }
      
        public static Vertex of(String id) {
          return new Vertex(id, null);
        }
      
        public Point point() {
          return point;
        }
      
        public String id() {
          return id;
        }
      
        public String name() {
          return "Vertex " + id;
        }
      
        public String labelName() {
          return "VertexLabel " + id;
        }
      }
      
      class Edge {
        private final String from;
        private final String to;
        private final int weight;
      
        public Edge(String from, String to, int weight) {
          this.from = from;
          this.to = to;
          this.weight = weight;
        }
      
        public static Edge of(String from, String to) {
          return new Edge(from, to, 0);
        }
      
        public String from() {
          return from;
        }
      
        public String to() {
          return to;
        }
      
        public int weight() {
          return weight;
        }
      
        public String name() {
          return "Edge <" + from + " -> " + to + ">";
        }
      
        public String labelName() {
          return "EdgeLabel <" + from + " -> " + to + ">";
        }
      
        public Edge opposite() {
          return new Edge(this.to, this.from, this.weight);
        }
      }
      
      enum ComponentType {
        VERTEX("Vertex "),
        EDGE("Edge "),
        EDGE_LABEL("EdgeLabel "),
        VERTEX_LABEL("VertexLabel "),
        ANY("");
      
        private final String prefix;
      
        ComponentType(String prefix) {
          this.prefix = prefix;
        }
      
        public String prefix() {
          return prefix;
        }
      }
      
      @SuppressWarnings("unused")
      public class RemovingVerticesAndEdgesTests extends SwingTest {
      
        @SwingComponent(name = "Graph")
        private JPanelFixture graph;
      
        @SwingComponent(name = "Mode")
        private JLabelFixture modeText;
      
        @SwingComponent(name = "Add a Vertex")
        private JMenuItemFixture addAVertexMode;
      
        @SwingComponent(name = "Add an Edge")
        private JMenuItemFixture addAnEdgeMode;
      
        @SwingComponent(name = "Remove a Vertex")
        private JMenuItemFixture removeAVertexMode;
      
        @SwingComponent(name = "Remove an Edge")
        private JMenuItemFixture removeAnEdgeMode;
      
        @SwingComponent(name = "New")
        private JMenuItemFixture newMenuItem;
      
        @SwingComponent(name = "Exit")
        private JMenuItemFixture exitMenuItem;
      
        @SwingComponent(name = "None")
        private JMenuItemFixture noneMode;
      
        public RemovingVerticesAndEdgesTests() {
          super(new MainFrame());
        }
      
        @DynamicTest(order = 1, feedback = "Title should be \"Graph-Algorithms Visualizer\"")
        CheckResult isCorrectFrameTitle() {
      
          assertThat(frame.getTitle())
                  .containsIgnoringCase("Graph-Algorithms Visualizer");
      
          return correct();
        }
      
        @DynamicTest(order = 2, feedback = "Size of Frame Should be - (800 x 600)")
        CheckResult isCorrectFrameDimension() {
      
          Dimension size = frame.getSize();
      
          assertThat(size.getWidth())
                  .isEqualTo(800);
          assertThat(size.getHeight())
                  .isEqualTo(600);
      
          return correct();
        }
      
        @DynamicTest(order = 3, feedback = "Initially graph panel should not contain anything.")
        CheckResult isEmptyGraph() {
          assertThat(count(ComponentType.ANY))
                  .isEqualTo(0);
          return correct();
        }
      
        @DynamicTest(order = 4, feedback = "Initial Mode must be \"Add a Vertex\"")
        CheckResult isCorrectCurrentMode() {
          modeText.requireText(Pattern.compile(".*add a vertex.*", Pattern.CASE_INSENSITIVE));
          return correct();
        }
      
      
        @DynamicTest(order = 5, feedback = "Mode text should change after switching modes")
        CheckResult isModeSwitchFunctioning() {
      
          addAVertexMode.click();
          modeText.requireText(Pattern.compile(".*add a vertex.*", Pattern.CASE_INSENSITIVE));
      
          removeAVertexMode.click();
          modeText.requireText(Pattern.compile(".*remove a vertex.*", Pattern.CASE_INSENSITIVE));
      
          addAnEdgeMode.click();
          modeText.requireText(Pattern.compile(".*add an edge.*", Pattern.CASE_INSENSITIVE));
      
          removeAnEdgeMode.click();
          modeText.requireText(Pattern.compile(".*remove an edge.*", Pattern.CASE_INSENSITIVE));
      
          noneMode.click();
          modeText.requireText(Pattern.compile(".*none.*", Pattern.CASE_INSENSITIVE));
      
          return correct();
        }
      
        private final Vertex[] vertices = new Vertex[]{
                new Vertex("A", new Point(100, 200)),
                new Vertex("B", new Point(400, 300)),
                new Vertex("C", new Point(300, 400)),
                new Vertex("D", new Point(200, 100)),
                new Vertex("E", new Point(700, 200)),
                new Vertex("F", new Point(700, 100))
        };
      
        @DynamicTest(order = 6)
        CheckResult changeModeToAddAVertex() {
          addAVertexMode.click();
          return correct();
        }
      
        @DynamicTest(order = 7, feedback = "Could not insert vertex", data = "vertices")
        CheckResult insertVertex(Vertex vertex) {
      
          getWindow().robot().click(graph.target(), vertex.point());
      
          JOptionPaneFixture jOptionPaneFixture;
          try {
      
            jOptionPaneFixture = JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(200)
                    .using(getWindow().robot());
      
          } catch (WaitTimedOutError e) {
            return wrong("Timeout waiting for a dialog box to open");
          }
      
          try {
      
            jOptionPaneFixture.textBox();
      
          } catch (ComponentLookupException e) {
            return wrong("A text box was not found inside the dialog box");
          }
      
          try {
      
            jOptionPaneFixture.okButton();
      
          } catch (ComponentLookupException e) {
            return wrong("A ok button was not found inside the dialog box");
          }
      
          try {
      
            jOptionPaneFixture.cancelButton();
      
          } catch (ComponentLookupException e) {
            return wrong("A cancel button was not found inside the dialog box");
          }
      
          try {
      
            jOptionPaneFixture.requireTitle(Pattern.compile("vertex", Pattern.CASE_INSENSITIVE));
      
          } catch (Exception ignore) {
            return wrong("Dialog box title should contain \"Vertex\"");
          }
      
      
          try {
      
            jOptionPaneFixture
                    .textBox()
                    .setText(vertex.id());
      
            jOptionPaneFixture
                    .textBox()
                    .requireText(vertex.id());
          } catch (Exception e) {
            return wrong("Cannot write text '" + vertex.id() + "' in dialog box / Incorrect text after writing. Expected: " +
                    "'" + vertex.id() + "'");
          }
      
          JOptionPaneFinder
                  .findOptionPane()
                  .using(getWindow().robot())
                  .okButton()
                  .click();
      
          try {
      
            JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(200)
                    .using(getWindow().robot());
      
            return wrong("Dialog box did not disappear after clicking ok");
          } catch (WaitTimedOutError ignored) {
          }
      
          Optional<Component> vOp = getVertex(vertex.id());
      
          if (vOp.isEmpty()) {
            return wrong(vertex.name() + " was not created. It is not present in graph panel");
          }
      
          if (!(vOp.get() instanceof JPanel)) {
            throw new WrongAnswer("Each Vertex should be represented by a JPanel.");
          }
      
          JPanel v = (JPanel) vOp.get();
      
          if (v.getSize().getHeight() != 50 || v.getSize().getWidth() != 50) {
            Dimension expected = new Dimension(50, 50);
            Dimension got = v.getSize();
            throw new WrongAnswer("Incorrect Vertex Size. Expected: " + expected + ", Got: " + got);
          }
      
          Optional<Component> vl = getVertexLabel(vertex.id());
      
          if (vl.isEmpty()) {
            throw new WrongAnswer("Label of " + vertex.name() + " is not Present.");
          }
      
          if (!(vl.get() instanceof JLabel)) {
            throw new WrongAnswer("Each Vertex label must be represented by JLabel.");
          }
      
          JLabel vLabel = (JLabel) vl.get();
      
          if (!Objects.equals(vLabel.getParent().getName(), vertex.name())) {
            throw new WrongAnswer("Each Label of each vertex must be present inside it.");
          }
      
          if (!Objects.equals(vLabel.getText(), vertex.id())) {
            throw new WrongAnswer("Vertex Label Should Contain ID of Vertex");
          }
      
          Point got = v.getLocation();
          Point expected = new Point((int) (vertex.point().getX() - 25), (int) (vertex.point().getY() - 25));
          if (!expected.equals(got)) {
            throw new WrongAnswer("Incorrect Position. Expected: " + expected + ", Got: " + got);
          }
      
          return correct();
        }
      
        private final Edge[] edges = new Edge[]{
                new Edge("D", "B", 1),
                new Edge("A", "B", 1),
                new Edge("C", "A", 2),
                new Edge("A", "D", 3),
                new Edge("B", "C", 4),
                new Edge("C", "D", 6),
                new Edge("B", "F", 5),
                new Edge("C", "E", -1)
        };
      
        @DynamicTest(order = 8)
        CheckResult changeModeToAddAnEdge() {
          addAnEdgeMode.click();
          return correct();
        }
      
        @DynamicTest(order = 9, data = "edges", feedback = "Could not insert edges")
        CheckResult insertEdge(Edge edge) {
      
      
          getWindow().robot().click(getVertex(edge.from()).orElseThrow());
          getWindow().robot().click(getVertex(edge.to()).orElseThrow());
      
          JOptionPaneFixture jOptionPaneFixture;
      
          try {
            jOptionPaneFixture = JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(1000)
                    .using(getWindow().robot());
          } catch (WaitTimedOutError e) {
            return wrong("Clicking on two vertices in the \"Add an Edge\" mode; a new window must pop up prompting for edge" +
                    " weight");
          }
      
          try {
            jOptionPaneFixture.okButton();
          } catch (ComponentLookupException e) {
            return wrong("A ok button was not found in edge weight prompting input box.");
          }
      
          try {
            jOptionPaneFixture.cancelButton();
          } catch (ComponentLookupException e) {
            return wrong("A cancel button was not found in edge weight prompting input box.");
          }
      
          try {
            jOptionPaneFixture.textBox();
          } catch (ComponentLookupException e) {
            return wrong("A text box was not found in edge weight prompting input box.");
          }
      
          try {
            jOptionPaneFixture
                    .textBox()
                    .setText(edge.weight() + "");
      
            jOptionPaneFixture
                    .textBox()
                    .requireText(edge.weight() + "");
          } catch (Exception e) {
            return wrong("Could not enter text in the edge weight prompting dialog box.");
          }
      
          jOptionPaneFixture
                  .okButton()
                  .click();
      
          try {
            JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(1000)
                    .using(getWindow().robot());
      
            return wrong("Dialog box must close after clicking on ok button.");
          } catch (WaitTimedOutError ignored) {
          }
      
          Component aTob = getEdge(edge.from(), edge.to()).orElseThrow(() -> new WrongAnswer("\"" + edge.labelName() + "\" " +
                  "was not found!"));
      
          Component bToa =
                  getEdge(edge.to(), edge.from()).orElseThrow(() -> new WrongAnswer("\"" + edge.opposite().labelName() +
                          "\" was not found!"));
      
          Component label = getEdgeLabel(edge.from(), edge.to()).orElseThrow(() -> new WrongAnswer("Edge Label which should" +
                  " contain the edge weight was not found in graph."));
      
          if (!(aTob instanceof JComponent) || !(bToa instanceof JComponent))
            throw new WrongAnswer("Edge must be represented by JComponent");
      
          if (!(label instanceof JLabel))
            throw new WrongAnswer("EdgeLabel must be represented by JLabel");
      
          if (!Objects.equals(graph.target(), label.getParent()))
            throw new WrongAnswer("Parent of each edge label is the graph itself not the edge.");
      
      
          try {
            assertThat(((JLabel) label).getText())
                    .containsIgnoringCase(edge.weight() + "");
          } catch (Exception e) {
            return wrong("Edge Label should hold the weight of the respective edge");
          }
      
          return correct();
        }
      
        private final String[] incorrectWeights = new String[]{"", " ", "  ", "A", "BC", "!", "Cancel"};
      
        @DynamicTest(order = 10, data = "incorrectWeights")
        CheckResult incorrectEdgeWeights(String weight) {
      
          getWindow().robot().click(getVertex("D").orElseThrow());
          getWindow().robot().click(getVertex("F").orElseThrow());
      
          try {
            JOptionPaneFixture jOptionPaneFixture = JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(1000)
                    .using(getWindow().robot());
            jOptionPaneFixture.textBox().setText(weight);
            if (!weight.equals("Cancel"))
              jOptionPaneFixture.okButton().click();
            else
              jOptionPaneFixture.cancelButton().click();
      
            if (!weight.equals("Cancel"))
              JOptionPaneFinder
                      .findOptionPane()
                      .withTimeout(1000)
                      .using(getWindow().robot());
      
            return correct();
          } catch (WaitTimedOutError e) {
            return wrong("Dialog box should appear again and again if invalid input is given");
          }
        }
      
        @DynamicTest(order = 11)
        CheckResult vertexInsertionInIncorrectMode() {
      
          changeModeToAddAnEdge();
          graph.click();
      
          try {
            JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(1000)
                    .using(getWindow().robot());
            return wrong("Vertex should not be inserted in other modes");
          } catch (WaitTimedOutError e) {
            return correct();
          } catch (Exception e) {
            return wrong("Vertex should not be inserted in other modes");
          }
        }
      
        @DynamicTest(order = 12)
        CheckResult edgeInsertionInIncorrectMode() {
      
          changeModeToAddAVertex();
          getWindow().robot().click(getVertex("D").orElseThrow());
          getWindow().robot().click(getVertex("F").orElseThrow());
      
          try {
            JOptionPaneFinder
                    .findOptionPane()
                    .withTimeout(1000)
                    .using(getWindow().robot());
            return wrong("Edge should not be inserted in other modes");
          } catch (WaitTimedOutError e) {
            return correct();
          } catch (Exception e) {
            return wrong("Edge should not be inserted in other modes");
          }
        }
      
        @DynamicTest(order = 13)
        CheckResult checkVertexCount() {
          int got = count(ComponentType.VERTEX);
          int expected = vertices.length;
          if (expected != got)
            return wrong("Incorrect Vertex Count. Expected = " + expected + ", Got = " + got);
          return correct();
        }
      
        @DynamicTest(order = 14)
        CheckResult checkEdgeCount() {
          int got = count(ComponentType.EDGE);
          int expected = edges.length * 2;
          if (expected != got)
            return wrong("Incorrect Edge Count. Expected = " + expected + ", Got = " + got);
          return correct();
        }
      
        @DynamicTest(order = 15)
        CheckResult checkVertexLabelCount() {
          int got = count(ComponentType.VERTEX_LABEL);
          int expected = vertices.length;
          if (expected != got)
            return wrong("Incorrect Vertex Label (id) Count. Expected = " + expected + ", Got = " + got);
          return correct();
        }
      
        @DynamicTest(order = 16)
        CheckResult checkEdgeLabelCount() {
          int got = count(ComponentType.EDGE_LABEL);
          int expected = edges.length;
          if (expected != got)
            return wrong("Incorrect Edge Label Count. Expected = " + expected + ", Got = " + got);
          return correct();
        }
      
        @DynamicTest(order = 17)
        CheckResult switchToRemoveAnEdgeMode() {
          removeAnEdgeMode.click();
          return correct();
        }
      
        private final String[][] toBeRemovedEdges = new String[][]{
                new String[]{"B", "F"},
                new String[]{"C", "E"}
        };
      
        @DynamicTest(order = 18, data = "toBeRemovedEdges", feedback = "Could not remove Edge")
        CheckResult removeEdge(String from, String to) {
          try {
            getWindow().robot().click(getEdge(from, to).orElseThrow());
          } catch (NoSuchElementException e) {
            throw new WrongAnswer(Edge.of(from, to).name() + " is not present in graph before removing");
          }
          if (getEdge(from, to).isPresent()) {
            throw new WrongAnswer(Edge.of(from, to).name() + " is present in graph even after removing");
          }
      
          if (getEdge(to, from).isPresent()) {
            throw new WrongAnswer(Edge.of(to, from).name() + " is present in graph even after removing");
          }
      
          if (getEdgeLabel(from, to).isPresent()) {
            throw new WrongAnswer(Edge.of(from, to).labelName() + " is present in graph even after removing");
          }
      
          return correct();
        }
      
        @DynamicTest(order = 19)
        CheckResult switchToRemoveAVertexMode() {
          removeAVertexMode.click();
          return correct();
        }
      
        private final String[] toBeRemovedVertices = new String[]{"F", "E", "B", "C"};
      
        @DynamicTest(order = 20, data = "toBeRemovedVertices", feedback = "Could not remove Vertex")
        CheckResult removeVertex(String id) {
      
          getWindow().robot().click(getVertex(id).orElseThrow());
      
          if (getVertex(id).isPresent()) {
            throw new WrongAnswer(Vertex.of(id).name() + " is present in graph even after removing");
          }
      
          if (getVertexLabel(id).isPresent()) {
            throw new WrongAnswer(Vertex.of(id).labelName() + " is present in graph even after removing");
          }
      
          int adjEdgesCount = getInOrOutEdgesCount(id);
          if (adjEdgesCount != 0) {
            throw new WrongAnswer("All inward and outward edges of the vertex should be removed after removing the vertex " +
                    "itself. Found = " + adjEdgesCount);
          }
      
          return correct();
        }
      
        @DynamicTest(order = 21)
        CheckResult removeVertexInOtherModes() {
          for (var mode : List.of(addAVertexMode, addAnEdgeMode, removeAnEdgeMode, noneMode)) {
            try {
              mode.click();
            } catch (Exception e) {
              return wrong("Error when selecting the menu button, on the Mode tab:\n" +
                      "error on clicked " + mode.target().getName());
            }
            try {
              removeVertex("A");
              return wrong("Removed Vertex in wrong mode : " + mode.target().getName());
            } catch (Throwable ignored) {
            }
          }
          return correct();
        }
      
        @DynamicTest(order = 22)
        CheckResult removeEdgeInOtherModes() {
          String prevModeName = "another";
          for (var mode : List.of(addAVertexMode, addAnEdgeMode, removeAVertexMode, noneMode)) {
            try {
              mode.click();
            } catch (ActionFailedException e) {
              return wrong("Can't click a menu mode, most likely there is an unexpected blocking pop-up from " + prevModeName + " mode:" +
                      " " + mode.target().getName());
            }
            try {
              removeEdge("A", "D");
              return wrong("Removed Edge in wrong mode : " + mode.target().getName());
            } catch (Throwable ignored) {
            }
            prevModeName = mode.target().getName();
          }
          return correct();
        }
      
        @DynamicTest(order = 23)
        CheckResult checkNewMenuItem() {
          newMenuItem.click();
      
          if (count(ComponentType.ANY) != 0) {
            return wrong("Clicking on \"New\" menu should clear out the entire graph.");
          }
      
          return correct();
        }
      
        private int getInOrOutEdgesCount(String id) {
          List<Component> components = new ArrayList<>();
          for (var c : getAllComponents(graph.target())) {
            if (c.getName() != null && (
                    c.getName().startsWith("Edge <" + id + " -> ") ||
                            c.getName().startsWith("EdgeLabel <" + id + " -> ") ||
                            c.getName().endsWith(" -> " + id + ">")
            )) {
              components.add(c);
            }
          }
          return components.size();
        }
      
        private int count(ComponentType type) {
          return (int) getAllComponents(graph.target())
                  .stream()
                  .filter(it -> it.getName() != null && it.getName().startsWith(type.prefix()))
                  .count();
        }
      
        private Optional<Component> getVertexLabel(String id) {
          String name = Vertex.of(id).labelName();
      
          return getAllComponents(graph.target())
                  .stream()
                  .filter(it -> Objects.equals(it.getName(), name))
                  .findFirst();
      
        }
      
        private Optional<Component> getEdgeLabel(String from, String to) {
          String name = Edge.of(from, to).labelName();
      
          return getAllComponents(graph.target())
                  .stream()
                  .filter(it -> Objects.equals(it.getName(), name))
                  .findFirst();
      
        }
      
        private Optional<Component> getEdge(String from, String to) {
          String name = Edge.of(from, to).name();
      
          return getAllComponents(graph.target())
                  .stream()
                  .filter(it -> Objects.equals(it.getName(), name))
                  .findFirst();
        }
      
        private Optional<Component> getVertex(String id) {
          String name = Vertex.of(id).name();
      
          return getAllComponents(graph.target())
                  .stream()
                  .filter(it -> Objects.equals(name, it.getName()))
                  .findFirst();
        }
      }
    learner_created: false
feedback_link: https://hyperskill.org/projects/207/stages/1035/implement#comment
status: Unchecked
record: -1
