type: edu
files:
  - name: src/visualizer/ApplicationRunner.java
    visible: true
    text: |
      package visualizer;
      
      public class ApplicationRunner {
          public static void main(String[] args) {
              new MainFrame();
          }
      }
    learner_created: false
  - name: src/visualizer/MainFrame.java
    visible: true
    text: |-
      package visualizer;
      
      import javax.swing.*;
      import java.awt.*;
      import java.awt.event.MouseAdapter;
      import java.awt.event.MouseEvent;
      import java.util.Objects;
      
      public class MainFrame extends JFrame{
      
          private int mouseX = 0;
          private int mouseY = 0;
          private JPanel graph;
          private MODE mode = MODE.ADD_VERTEX;
          private MouseAdapter mouseAdapter;
          private final String resetString = "New";
          private final String exitString = "Exit";
          private final String currentOptionString = "Current Mode -> ";
          private final String addAVertexString = "Add a Vertex";
          private final String addAnEdgeString = "Add an Edge";
          private final String removeAVertexString = "Remove a Vertex";
          private final String removeAnEdgeString = "Remove an Edge";
          private final String addNoneString = "None";
          private JLabel currentMode;
          private Vertex selectedVertex1 = null;
          private Vertex selectedVertex2 = null;
      
          public MainFrame() {
              setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              setTitle("Graph-Algorithms Visualizer");
              setSize(800, 600);
              setLayout(null);
              initCurrentMode();
              initGraph();
              initMenu();
              initMouseAdapter();
              setVisible(true);
          }
      
          private void initCurrentMode() {
              currentMode = new JLabel(currentOptionString + addAVertexString);
              currentMode.setName("Mode");
              currentMode.setForeground(Color.BLACK);
              currentMode.setBounds(10,550,300,50);
              add(currentMode);
          }
      
          private void initMouseAdapter() {
              mouseAdapter = new MouseAdapter() {
                  @Override
                  public void mouseClicked(MouseEvent mouseEvent) {
                      super.mouseClicked(mouseEvent);
                      mouseX = mouseEvent.getX();
                      mouseY = mouseEvent.getY();
                      switch (mode) {
                          case ADD_VERTEX -> createVertex(Objects.requireNonNull(getVertexID()));
                          case ADD_EDGE -> handleEdgeCreation();
                          case REMOVE_EDGE -> removeEdge();
                      }
                  }
              };
              graph.addMouseListener(mouseAdapter);
          }
      
          private void initMenu() {
              JMenuBar menuBar = new JMenuBar();
              setJMenuBar(menuBar);
              JMenu fileMenu = new JMenu("File");
              menuBar.add(fileMenu);
              initFileMenuItems(fileMenu);
              JMenu modeMenu = new JMenu("Mode");
              menuBar.add(modeMenu);
              initModeMenuItems(modeMenu);
          }
      
          private void initFileMenuItems(JMenu fileMenu) {
              JMenuItem reset = new JMenuItem(resetString);
              JMenuItem exit = new JMenuItem(exitString);
              reset.setName(resetString);
              exit.setName(exitString);
              reset.addActionListener(event -> {
                  graph.removeAll();
                  graph.repaint();
              });
              exit.addActionListener(event -> {
                  System.exit(0);
              });
              fileMenu.add(reset);
              fileMenu.add(exit);
          }
      
          private void initModeMenuItem(JMenu modeMenu, String label, MODE mode) {
              JMenuItem menuItem = new JMenuItem(label);
              menuItem.setName(label);
              modeMenu.add(menuItem);
              menuItem.addActionListener(event -> {
                  this.mode = mode;
                  setCurrentOption(mode);
              });
          }
      
          private void initModeMenuItems(JMenu modeMenu) {
              initModeMenuItem(modeMenu, addAVertexString, MODE.ADD_VERTEX);
              initModeMenuItem(modeMenu, addAnEdgeString, MODE.ADD_EDGE);
              initModeMenuItem(modeMenu, removeAVertexString, MODE.REMOVE_VERTEX);
              initModeMenuItem(modeMenu, removeAnEdgeString, MODE.REMOVE_EDGE);
              initModeMenuItem(modeMenu, addNoneString, MODE.NONE);
          }
      
          private void initGraph() {
              graph = new JPanel();
              graph.setName("Graph");
              graph.setBackground(new Color(0, 0, 0, 0));
              graph.setLayout(null);
              graph.setBorder(BorderFactory.createLineBorder(Color.BLACK));
              graph.setSize(800, 600);
              graph.addMouseListener(mouseAdapter);
              this.add(graph);
          }
      
          private void setCurrentOption(MODE mode) {
              switch(mode) {
                  case ADD_VERTEX -> currentMode.setText(currentOptionString + addAVertexString);
                  case ADD_EDGE -> currentMode.setText(currentOptionString + addAnEdgeString);
                  case REMOVE_VERTEX -> currentMode.setText(currentOptionString + removeAVertexString);
                  case REMOVE_EDGE -> currentMode.setText(currentOptionString + removeAnEdgeString);
                  case NONE -> currentMode.setText(currentOptionString + addNoneString);
              }
          }
      
          private String getWeight() {
              String weightNum = null;
              boolean validInput = false;
              while (!validInput) {
                  // Prompt for weightNum
                  weightNum = JOptionPane.showInputDialog(null, "Enter Weight:", "Input", JOptionPane.PLAIN_MESSAGE);
                  if (weightNum == null) {
                      // User clicked cancel
                      return "";
                  } else if (weightNum.isEmpty()) {
                      continue;
                  }
      
                  if (weightNum.length() > 1 && weightNum.charAt(0) == '-') {
                      if (Character.isDigit(weightNum.charAt(1))) {
                          validInput = true;
                      }
                  } else if (Character.isDigit(weightNum.charAt(0))) {
                      validInput = true;
                  }
              }
              return weightNum;
          }
      
          private Component getComponent(Class<?> type) {
              for (Component component : graph.getComponents()) {
                  if (type.isInstance(component)) {
                      if (component.getBounds().contains(this.mouseX, this.mouseY)) {
                          return component;
                      }
                  }
              }
              return null;
          }
      
          private void createEdge() {
              String weight = getWeight();
              if (selectedVertex1 != null && selectedVertex2 != null && !weight.isEmpty()) {
                  // Create an edge with weight and add it to the graph
                  Edge edge1 = new Edge(selectedVertex1, selectedVertex2, weight);
                  Edge edge2 = new Edge(selectedVertex2, selectedVertex1, weight);
                  graph.add(edge1);
                  graph.add(edge2);
                  edge1.createLabel(graph);
                  graph.repaint();
              }
          }
      
          private void handleEdgeCreation() {
              Vertex clickedVertex = (Vertex) getComponent(Vertex.class);
              if (clickedVertex != null) {
                  if (selectedVertex1 == null) {
                      selectedVertex1 = clickedVertex;
                  } else {
                      selectedVertex2 = clickedVertex;
                      createEdge();
                      // Reset selected vertices for next edge creation
                      selectedVertex1 = null;
                      selectedVertex2 = null;
                  }
              }
          }
      
          private boolean spaceIsFree() {
              Vertex tempVertex = new Vertex(mouseX, mouseY);
              tempVertex.setBounds(mouseX-25, mouseY-25, 50, 50);
              for (Component component : graph.getComponents()) {
                  if (component instanceof Vertex existingVertex) {
                      if (tempVertex.getBounds().intersects(existingVertex.getBounds())) {
                          return false;
                      }
                  }
              }
              return true;
          }
      
          private String getVertexID() {
              if (spaceIsFree()) {
                  String vertexID = null;
                  boolean validInput = false;
                  while (!validInput) {
                      // Prompt for vertex ID
                      vertexID = JOptionPane.showInputDialog(null, "Enter Vertex ID (Should be 1 char):", "Vertex", JOptionPane.PLAIN_MESSAGE);
                      if (vertexID == null) {
                          // User clicked cancel
                          return null;
                      }
                      if (vertexID.length() == 1 && (Character.isLetter(vertexID.charAt(0)) || Character.isDigit(vertexID.charAt(0)))) {
                          validInput = true;
                      }
                  }
                  return vertexID;
              }
              return "NOT_FREE";
          }
      
          private void createVertex(String vertexID) {
              if (!vertexID.equals("NOT_FREE")) {
                  Vertex vertex = new Vertex("Vertex " + vertexID, "VertexLabel " + vertexID, vertexID, mouseX, mouseY);
                  // Set vertex position
                  vertex.setBounds(mouseX-25, mouseY-25, 50, 50);
                  graph.add(vertex);
                  graph.repaint();
              }
          }
      
          private void removeEdge() {
              int numberOfEdgesRemoved = 0;
              for (int i = 0; i < graph.getComponentCount(); i++) {
                  Edge selectedEdge = (Edge) getComponent(Edge.class);
                  if (selectedEdge != null) {
                      selectedEdge.removeLabel(graph);
                      graph.remove(selectedEdge);
                      numberOfEdgesRemoved++;
                  }
                  if (numberOfEdgesRemoved == 2) {
                      break;
                  }
              }
              graph.revalidate();
              graph.repaint();
          }
      }
    learner_created: false
  - name: src/visualizer/Vertex.java
    visible: true
    text: |
      package visualizer;
      
      import javax.swing.*;
      import java.awt.*;
      
      public class Vertex extends JPanel {
          private final String labelName;
          private final String labelText;
          private final int XCenterCord;
          private final int YCenterCord;
          private final int diameter = 50;
      
          public Vertex(int XCord, int YCord) {
              this.XCenterCord = XCord;
              this.YCenterCord = YCord;
              this.labelName = null;
              this.labelText = null;
          }
      
          public Vertex(String panelName, String labelName, String labelText, int XCord, int YCord) {
              this.labelName = labelName;
              this.labelText = labelText;
              this.XCenterCord = XCord;
              this.YCenterCord = YCord;
              setName(panelName);
              setPreferredSize(new Dimension(diameter,diameter));
              setLayout(null);
              createLabel();
          }
      
          public int getCenterX() {
              return XCenterCord;
          }
      
          public int getCenterY() {
              return YCenterCord;
          }
      
          @Override
          protected void paintComponent(Graphics g) {
              super.paintComponent(g);
              g.setColor(new Color(0, 0, 0, 0));
              g.fillRect(0,0, diameter, diameter);
              g.setColor(Color.BLACK);
              g.fillOval(0, 0, diameter, diameter);
          }
      
          public void createLabel() {
              JLabel label = new JLabel(labelText);
              label.setName(this.labelName);
              label.setForeground(Color.WHITE);
              label.setHorizontalAlignment(SwingConstants.CENTER);
              label.setVerticalAlignment(SwingConstants.CENTER);
              label.setBounds(0, 0, diameter, diameter); // Adjust label bounds to match the panel size
              add(label);
          }
      }
    learner_created: false
  - name: src/visualizer/MODE.java
    visible: true
    text: |
      package visualizer;
      
      public enum MODE {
          ADD_VERTEX,
          ADD_EDGE,
          REMOVE_VERTEX,
          REMOVE_EDGE,
          NONE
      }
    learner_created: false
  - name: src/visualizer/Edge.java
    visible: true
    text: |-
      package visualizer;
      import javax.swing.*;
      import java.awt.*;
      
      public class Edge extends JComponent {
          private final Vertex source;
          private final Vertex destination;
          private final String edgeName;
          private final String weight;
          private final char sourceID;
          private final char destinationID;
          private final int xCord;
          private final int yCord;
          private final int width;
          private final int height;
          private String labelName = null;
          private JLabel label;
      
          public Edge(Vertex source, Vertex destination, String weight) {
              this.source = source;
              this.destination = destination;
              this.weight = weight;
              this.sourceID = this.source.getName().charAt(source.getName().length() - 1);
              this.destinationID = this.destination.getName().charAt(destination.getName().length() - 1);
              this.edgeName = "Edge <" + this.sourceID + " -> " + this.destinationID + ">";
              xCord = Math.min(source.getCenterX(), destination.getCenterX());
              yCord = Math.min(source.getCenterY(), destination.getCenterY());
              width = Math.abs(destination.getCenterX() - source.getCenterX());
              height = Math.abs(destination.getCenterY() - source.getCenterY());
              setName(this.edgeName);
              setBounds(xCord, yCord, width, height);
              setVisible(true);
          }
      
          @Override
          protected void paintComponent(Graphics g) {
              super.paintComponent(g);
              Graphics2D g2d = (Graphics2D) g;
              g2d.setColor(Color.BLACK);
              float thickness = 4.0f;
              g2d.setStroke(new BasicStroke(thickness));
              g2d.drawLine(source.getCenterX() - xCord, source.getCenterY() - yCord, destination.getCenterX() - xCord, destination.getCenterY() - yCord);
          }
      
          public String getEdgeName() {
              return this.edgeName;
          }
      
          public void createLabel(JPanel graph) {
              int xCordLabel = (source.getCenterX() + destination.getCenterX()) / 2;
              int yCordLabel = (source.getCenterY() + destination.getCenterY()) / 2;
              label = new JLabel(weight);
              label.setName("EdgeLabel <" + this.sourceID + " -> " + this.destinationID + ">");
              label.setFont(label.getFont().deriveFont(16f));
              label.setBounds(xCordLabel + 5, yCordLabel + 5, 50, 20);
              this.labelName = label.getName();
              graph.add(label);
          }
      
          public void removeLabel(JPanel graph) {
              if (label != null) {
                  graph.remove(label);
                  graph.revalidate();
                  graph.repaint();
                  label = null; // Clear the reference
              }
          }
      }
    learner_created: false
  - name: test/GraphDataOne.java
    visible: true
    learner_created: true
  - name: test/_2_VertexTests.java
    visible: true
    learner_created: true
  - name: test/TestingUtils.java
    visible: true
    learner_created: true
  - name: test/Vertex.java
    visible: true
    learner_created: true
  - name: test/_1_InitialTests.java
    visible: true
    learner_created: true
  - name: test/_5_GraphAlgorithmTests.java
    visible: true
    learner_created: true
  - name: test/GraphDataTwo.java
    visible: true
    learner_created: true
  - name: test/_3_EdgesTests.java
    visible: true
    learner_created: true
  - name: test/_4_RemoveVertexEdgeTests.java
    visible: true
    learner_created: true
  - name: test/Edge.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/15630#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Fri, 19 Apr 2024 13:17:56 UTC"
record: -1
